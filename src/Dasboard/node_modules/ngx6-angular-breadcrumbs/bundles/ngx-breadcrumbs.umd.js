(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('lodash.template'), require('lodash.templatesettings'), require('@angular/core'), require('@angular/router'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-breadcrumbs', ['exports', 'rxjs', 'lodash.template', 'lodash.templatesettings', '@angular/core', '@angular/router', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-breadcrumbs'] = {}),global.rxjs,null,null,global.ng.core,global.ng.router,global.rxjs.operators,global.ng.common));
}(this, (function (exports,rxjs,template,templateSettings,core,router,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var _ = {
        template: template,
        templateSettings: templateSettings
    };
    _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    /**
     * @param {?} template
     * @param {?} binding
     * @return {?}
     */
    function stringFormat(template$$1, binding) {
        /** @type {?} */
        var compiled = _.template(template$$1);
        return compiled(binding);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isPromise(value) {
        return value && typeof value.then === 'function';
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function wrapIntoObservable(value) {
        if (value instanceof rxjs.Observable) {
            return value;
        }
        if (isPromise(value)) {
            return rxjs.from(Promise.resolve(value));
        }
        return rxjs.of(/** @type {?} */ (value));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var McBreadcrumbsConfig = (function () {
        function McBreadcrumbsConfig() {
        }
        McBreadcrumbsConfig.decorators = [
            { type: core.Injectable },
        ];
        return McBreadcrumbsConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var McBreadcrumbsResolver = (function () {
        function McBreadcrumbsResolver() {
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        McBreadcrumbsResolver.prototype.resolve = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                /** @type {?} */
                var data = route.routeConfig.data;
                /** @type {?} */
                var path = this.getFullPath(route);
                /** @type {?} */
                var text = typeof data["breadcrumbs"] === 'string'
                    ? data["breadcrumbs"] : data["breadcrumbs"].text || data["text"] || path;
                text = stringFormat(text, route.data);
                /** @type {?} */
                var crumbs = [
                    {
                        text: text,
                        path: path
                    }
                ];
                return rxjs.of(crumbs);
            };
        /**
         * @param {?} route
         * @return {?}
         */
        McBreadcrumbsResolver.prototype.getFullPath = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                /** @type {?} */
                var relativePath = function (segments) {
                    return segments.reduce(function (a, v) { return (a += '/' + v.path); }, '');
                };
                /** @type {?} */
                var fullPath = function (routes) {
                    return routes.reduce(function (a, v) { return (a += relativePath(v.url)); }, '');
                };
                return fullPath(route.pathFromRoot);
            };
        return McBreadcrumbsResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var McBreadcrumbsService = (function () {
        function McBreadcrumbsService(_router, _config, _injector) {
            var _this = this;
            this._router = _router;
            this._config = _config;
            this._injector = _injector;
            this._breadcrumbs = new rxjs.BehaviorSubject([]);
            this._defaultResolver = new McBreadcrumbsResolver();
            this._router.events
                .pipe(operators.filter(function (x) { return x instanceof router.NavigationEnd; }))
                .subscribe(function (event) {
                /** @type {?} */
                var route = _router.routerState.snapshot.root;
                _this._resolveCrumbs(route)
                    .pipe(operators.flatMap(function (x) { return x; }), operators.distinct(function (x) { return x.text; }), operators.toArray(), operators.flatMap(function (x) {
                    if (_this._config.postProcess) {
                        /** @type {?} */
                        var y = _this._config.postProcess(x);
                        return wrapIntoObservable(y).pipe(operators.first());
                    }
                    else {
                        return rxjs.of(x);
                    }
                }))
                    .subscribe(function (x) {
                    _this._breadcrumbs.next(x);
                });
            });
        }
        Object.defineProperty(McBreadcrumbsService.prototype, "crumbs$", {
            get: /**
             * @return {?}
             */ function () {
                return this._breadcrumbs;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} route
         * @return {?}
         */
        McBreadcrumbsService.prototype._resolveCrumbs = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                /** @type {?} */
                var crumbs$;
                /** @type {?} */
                var data = route.routeConfig && route.routeConfig.data;
                if (data && data["breadcrumbs"]) {
                    /** @type {?} */
                    var resolver = void 0;
                    if (data["breadcrumbs"].prototype instanceof McBreadcrumbsResolver) {
                        resolver = this._injector.get(data["breadcrumbs"]);
                    }
                    else {
                        resolver = this._defaultResolver;
                    }
                    /** @type {?} */
                    var result = resolver.resolve(route, this._router.routerState.snapshot);
                    crumbs$ = wrapIntoObservable(result).pipe(operators.first());
                }
                else {
                    crumbs$ = rxjs.of([]);
                }
                if (route.firstChild) {
                    crumbs$ = crumbs$.pipe(operators.concat(this._resolveCrumbs(route.firstChild)));
                }
                return crumbs$;
            };
        McBreadcrumbsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        McBreadcrumbsService.ctorParameters = function () {
            return [
                { type: router.Router },
                { type: McBreadcrumbsConfig },
                { type: core.Injector }
            ];
        };
        return McBreadcrumbsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var McBreadcrumbsComponent = (function () {
        function McBreadcrumbsComponent(service) {
            this.service = service;
            this.subscriptions = new Array();
        }
        /**
         * @return {?}
         */
        McBreadcrumbsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var s = this.service.crumbs$.subscribe(function (x) {
                    _this.crumbs = x;
                });
            };
        /**
         * @return {?}
         */
        McBreadcrumbsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscriptions.forEach(function (x) { return x.unsubscribe(); });
            };
        McBreadcrumbsComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'mc-breadcrumbs',
                        template: "<ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n  <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n    <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n    <span *ngIf=\"last\">{{ crumb.text }}</span>\n  </li>\n</ol>\n"
                    },] },
        ];
        /** @nocollapse */
        McBreadcrumbsComponent.ctorParameters = function () {
            return [
                { type: McBreadcrumbsService }
            ];
        };
        return McBreadcrumbsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var McBreadcrumbsModule = (function () {
        function McBreadcrumbsModule() {
        }
        /**
         * @return {?}
         */
        McBreadcrumbsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: McBreadcrumbsModule,
                    providers: [McBreadcrumbsService, McBreadcrumbsConfig]
                };
            };
        McBreadcrumbsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, router.RouterModule],
                        declarations: [McBreadcrumbsComponent],
                        exports: [McBreadcrumbsComponent]
                    },] },
        ];
        return McBreadcrumbsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.McBreadcrumbsComponent = McBreadcrumbsComponent;
    exports.McBreadcrumbsService = McBreadcrumbsService;
    exports.McBreadcrumbsConfig = McBreadcrumbsConfig;
    exports.McBreadcrumbsResolver = McBreadcrumbsResolver;
    exports.McBreadcrumbsModule = McBreadcrumbsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,