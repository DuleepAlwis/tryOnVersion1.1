/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';
import { Component } from '@angular/core';
export class McBreadcrumbsComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.subscriptions = new Array();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const s = this.service.crumbs$.subscribe(x => {
            this.crumbs = x;
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach(x => x.unsubscribe());
    }
}
McBreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mc-breadcrumbs',
                template: `<ol *ngIf="crumbs.length" class="breadcrumb">
  <li *ngFor="let crumb of crumbs; let last = last" [ngClass]="{ 'active': last }" class="breadcrumb-item">
    <a *ngIf="!last" [routerLink]="crumb.path">{{ crumb.text }}</a>
    <span *ngIf="last">{{ crumb.text }}</span>
  </li>
</ol>
`
            },] },
];
/** @nocollapse */
McBreadcrumbsComponent.ctorParameters = () => [
    { type: McBreadcrumbsService }
];
if (false) {
    /** @type {?} */
    McBreadcrumbsComponent.prototype.crumbs;
    /** @type {?} */
    McBreadcrumbsComponent.prototype.subscriptions;
    /** @type {?} */
    McBreadcrumbsComponent.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWMtYnJlYWRjcnVtYnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJyZWFkY3J1bWJzLyIsInNvdXJjZXMiOlsic3JjL2NvbXBvbmVudC9tYy1icmVhZGNydW1icy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBZTdELE1BQU07Ozs7SUFDSixZQUFtQixPQUE2QjtRQUE3QixZQUFPLEdBQVAsT0FBTyxDQUFzQjs2QkFJaEMsSUFBSSxLQUFLLEVBQWdCO0tBSlc7Ozs7SUFNN0MsUUFBUTs7UUFDYixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDakIsQ0FBQyxDQUFDOzs7OztJQUdMLFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQ2xEOzs7WUExQkYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUU7Ozs7OztDQU1YO2FBQ0E7Ozs7WUFoQlEsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWNCcmVhZGNydW1ic1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL21jLWJyZWFkY3J1bWJzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQnJlYWRjcnVtYiB9IGZyb20gJy4uL21jLWJyZWFkY3J1bWJzLnNoYXJlZCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdtYy1icmVhZGNydW1icycsXG4gIHRlbXBsYXRlOiBgPG9sICpuZ0lmPVwiY3J1bWJzLmxlbmd0aFwiIGNsYXNzPVwiYnJlYWRjcnVtYlwiPlxuICA8bGkgKm5nRm9yPVwibGV0IGNydW1iIG9mIGNydW1iczsgbGV0IGxhc3QgPSBsYXN0XCIgW25nQ2xhc3NdPVwieyAnYWN0aXZlJzogbGFzdCB9XCIgY2xhc3M9XCJicmVhZGNydW1iLWl0ZW1cIj5cbiAgICA8YSAqbmdJZj1cIiFsYXN0XCIgW3JvdXRlckxpbmtdPVwiY3J1bWIucGF0aFwiPnt7IGNydW1iLnRleHQgfX08L2E+XG4gICAgPHNwYW4gKm5nSWY9XCJsYXN0XCI+e3sgY3J1bWIudGV4dCB9fTwvc3Bhbj5cbiAgPC9saT5cbjwvb2w+XG5gXG59KVxuZXhwb3J0IGNsYXNzIE1jQnJlYWRjcnVtYnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOiBNY0JyZWFkY3J1bWJzU2VydmljZSkge31cblxuICBjcnVtYnM6IElCcmVhZGNydW1iW107XG5cbiAgc3Vic2NyaXB0aW9ucyA9IG5ldyBBcnJheTxTdWJzY3JpcHRpb24+KCk7XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IHMgPSB0aGlzLnNlcnZpY2UuY3J1bWJzJC5zdWJzY3JpYmUoeCA9PiB7XG4gICAgICB0aGlzLmNydW1icyA9IHg7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCh4ID0+IHgudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==