{"version":3,"file":"ngx-breadcrumbs.js.map","sources":["ng://ngx-breadcrumbs/src/mc-breadcrumbs.shared.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.config.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.resolver.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.service.ts","ng://ngx-breadcrumbs/src/component/mc-breadcrumbs.component.ts","ng://ngx-breadcrumbs/src/mc-breadcrumbs.module.ts"],"sourcesContent":["import { from, of, Observable } from 'rxjs';\n\nimport * as template from 'lodash.template';\nimport * as templateSettings from 'lodash.templatesettings';\n\nconst _ = {\n  template: template,\n  templateSettings: templateSettings\n};\n\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nexport interface IBreadcrumb {\n  text: string;\n  path: string;\n}\n\ndeclare var require: any;\n\nfunction r(module) {\n  return require(`${name}`);\n}\n\nexport function stringFormat(template: string, binding: any): string {\n  const compiled = _.template(template);\n  return compiled(binding);\n}\n\nexport function isPromise(value: any): boolean {\n  return value && typeof value.then === 'function';\n}\n\nexport function wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (value instanceof Observable) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value as T);\n}\n","import { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\nexport interface IPostProcessFunc {\n  (crumbs: IBreadcrumb[]):\n    | Promise<IBreadcrumb[]>\n    | Observable<IBreadcrumb[]>\n    | IBreadcrumb[];\n}\n\n@Injectable()\nexport class McBreadcrumbsConfig {\n  postProcess: IPostProcessFunc;\n}\n","import {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n  UrlSegment\n} from '@angular/router';\nimport { IBreadcrumb, stringFormat } from '../mc-breadcrumbs.shared';\nimport { Observable, of } from 'rxjs';\n\nexport class McBreadcrumbsResolver implements Resolve<IBreadcrumb[]> {\n  public resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n    const data = route.routeConfig.data;\n    const path = this.getFullPath(route);\n\n    let text =\n      typeof data.breadcrumbs === 'string'\n        ? data.breadcrumbs\n        : data.breadcrumbs.text || data.text || path;\n    text = stringFormat(text, route.data);\n\n    const crumbs: IBreadcrumb[] = [\n      {\n        text: text,\n        path: path\n      }\n    ];\n\n    return of(crumbs);\n  }\n\n  public getFullPath(route: ActivatedRouteSnapshot): string {\n    const relativePath = (segments: UrlSegment[]) =>\n      segments.reduce((a, v) => (a += '/' + v.path), '');\n    const fullPath = (routes: ActivatedRouteSnapshot[]) =>\n      routes.reduce((a, v) => (a += relativePath(v.url)), '');\n\n    return fullPath(route.pathFromRoot);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\n\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport {\n  flatMap,\n  distinct,\n  toArray,\n  concat,\n  first,\n  filter\n} from 'rxjs/operators';\n\nimport { IBreadcrumb, wrapIntoObservable } from '../mc-breadcrumbs.shared';\nimport { McBreadcrumbsConfig } from './mc-breadcrumbs.config';\nimport { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';\n\n@Injectable()\nexport class McBreadcrumbsService {\n  private _breadcrumbs = new BehaviorSubject<IBreadcrumb[]>([]);\n  private _defaultResolver = new McBreadcrumbsResolver();\n\n  constructor(\n    private _router: Router,\n    private _config: McBreadcrumbsConfig,\n    private _injector: Injector\n  ) {\n    this._router.events\n      .pipe(filter(x => x instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        const route = _router.routerState.snapshot.root;\n\n        this._resolveCrumbs(route)\n          .pipe(\n            flatMap(x => x),\n            distinct(x => x.text),\n            toArray(),\n            flatMap(x => {\n              if (this._config.postProcess) {\n                const y = this._config.postProcess(x);\n                return wrapIntoObservable<IBreadcrumb[]>(y).pipe(first());\n              } else {\n                return of(x);\n              }\n            })\n          )\n\n          .subscribe(x => {\n            this._breadcrumbs.next(x);\n          });\n      });\n  }\n\n  get crumbs$(): Observable<IBreadcrumb[]> {\n    return this._breadcrumbs;\n  }\n\n  private _resolveCrumbs(\n    route: ActivatedRouteSnapshot\n  ): Observable<IBreadcrumb[]> {\n    let crumbs$: Observable<IBreadcrumb[]>;\n\n    const data = route.routeConfig && route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n      let resolver: McBreadcrumbsResolver;\n\n      if (data.breadcrumbs.prototype instanceof McBreadcrumbsResolver) {\n        resolver = this._injector.get(data.breadcrumbs);\n      } else {\n        resolver = this._defaultResolver;\n      }\n\n      const result = resolver.resolve(route, this._router.routerState.snapshot);\n      crumbs$ = wrapIntoObservable<IBreadcrumb[]>(result).pipe(first());\n    } else {\n      crumbs$ = of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));\n    }\n\n    return crumbs$;\n  }\n}\n","import { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mc-breadcrumbs',\n  template: `<ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n  <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n    <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n    <span *ngIf=\"last\">{{ crumb.text }}</span>\n  </li>\n</ol>\n`\n})\nexport class McBreadcrumbsComponent implements OnInit, OnDestroy {\n  constructor(public service: McBreadcrumbsService) {}\n\n  crumbs: IBreadcrumb[];\n\n  subscriptions = new Array<Subscription>();\n\n  public ngOnInit(): void {\n    const s = this.service.crumbs$.subscribe(x => {\n      this.crumbs = x;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(x => x.unsubscribe());\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { McBreadcrumbsService } from './service/mc-breadcrumbs.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { McBreadcrumbsComponent } from './component/mc-breadcrumbs.component';\nimport { McBreadcrumbsConfig } from './service/mc-breadcrumbs.config';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [McBreadcrumbsComponent],\n  exports: [McBreadcrumbsComponent]\n})\nexport class McBreadcrumbsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: McBreadcrumbsModule,\n      providers: [McBreadcrumbsService, McBreadcrumbsConfig]\n    };\n  }\n}\n"],"names":["template"],"mappings":";;;;;;;;;;;;AAAA;AAKA,MAAM,CAAC,GAAG;IACR,QAAQ,EAAE,QAAQ;IAClB,gBAAgB,EAAE,gBAAgB;CACnC,CAAC;AAEF,CAAC,CAAC,gBAAgB,CAAC,WAAW,GAAG,iBAAiB,CAAC;;;;;;AAanD,sBAA6BA,WAAgB,EAAE,OAAY;;IACzD,MAAM,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAACA,WAAQ,CAAC,CAAC;IACtC,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;CAC1B;;;;;AAED,mBAA0B,KAAU;IAClC,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC;CAClD;;;;;;AAED,4BACE,KAAqC;IAErC,IAAI,KAAK,YAAY,UAAU,EAAE;QAC/B,OAAO,KAAK,CAAC;KACd;IAED,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KACrC;IAED,OAAO,EAAE,mBAAC,KAAU,EAAC,CAAC;CACvB;;;;;;AC1CD;;;YAUC,UAAU;;;;;;;ACNX;;;;;;IAIS,OAAO,CACZ,KAA6B,EAC7B,KAA0B;;QAE1B,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;QAErC,IAAI,IAAI,GACN,OAAO,IAAI,eAAY,KAAK,QAAQ;cAChC,IAAI,kBACJ,IAAI,gBAAa,IAAI,IAAI,IAAI,QAAK,IAAI,IAAI,CAAC;QACjD,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;;QAEtC,MAAM,MAAM,GAAkB;YAC5B;gBACE,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;aACX;SACF,CAAC;QAEF,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;;;;;;IAGb,WAAW,CAAC,KAA6B;;QAC9C,MAAM,YAAY,GAAG,CAAC,QAAsB,KAC1C,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;;QACrD,MAAM,QAAQ,GAAG,CAAC,MAAgC,KAChD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAE1D,OAAO,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;;CAEvC;;;;;;ACzCD;;;;;;IAuBE,YACU,SACA,SACA;QAFA,YAAO,GAAP,OAAO;QACP,YAAO,GAAP,OAAO;QACP,cAAS,GAAT,SAAS;4BANI,IAAI,eAAe,CAAgB,EAAE,CAAC;gCAClC,IAAI,qBAAqB,EAAE;QAOpD,IAAI,CAAC,OAAO,CAAC,MAAM;aAChB,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,aAAa,CAAC,CAAC;aAC7C,SAAS,CAAC,CAAC,KAAoB;;YAC9B,MAAM,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC;YAEhD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;iBACvB,IAAI,CACH,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EACrB,OAAO,EAAE,EACT,OAAO,CAAC,CAAC;gBACP,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;;oBAC5B,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACtC,OAAO,kBAAkB,CAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC3D;qBAAM;oBACL,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;iBACd;aACF,CAAC,CACH;iBAEA,SAAS,CAAC,CAAC;gBACV,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC3B,CAAC,CAAC;SACN,CAAC,CAAC;KACN;;;;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;;;;;IAEO,cAAc,CACpB,KAA6B;;QAE7B,IAAI,OAAO,CAA4B;;QAEvC,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QAEzD,IAAI,IAAI,IAAI,IAAI,eAAY,EAAE;;YAC5B,IAAI,QAAQ,CAAwB;YAEpC,IAAI,IAAI,gBAAa,SAAS,YAAY,qBAAqB,EAAE;gBAC/D,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,gBAAa,CAAC;aACjD;iBAAM;gBACL,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC;aAClC;;YAED,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC1E,OAAO,GAAG,kBAAkB,CAAgB,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SACnE;aAAM;YACL,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;SAClB;QAED,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACvE;QAED,OAAO,OAAO,CAAC;;;;YAlElB,UAAU;;;;YAhBqC,MAAM;YAa7C,mBAAmB;YAfP,QAAQ;;;;;;;ACA7B;;;;IAkBE,YAAmB,OAA6B;QAA7B,YAAO,GAAP,OAAO,CAAsB;6BAIhC,IAAI,KAAK,EAAgB;KAJW;;;;IAM7C,QAAQ;;QACb,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACxC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;SACjB,CAAC,CAAC;;;;;IAGL,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;KAClD;;;YA1BF,SAAS,SAAC;;gBAET,QAAQ,EAAE,gBAAgB;gBAC1B,QAAQ,EAAE;;;;;;CAMX;aACA;;;;YAhBQ,oBAAoB;;;;;;;ACA7B;;;;IAaE,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAC,oBAAoB,EAAE,mBAAmB,CAAC;SACvD,CAAC;KACH;;;YAXF,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;gBACrC,YAAY,EAAE,CAAC,sBAAsB,CAAC;gBACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;aAClC;;;;;;;;;;;;;;;"}
