import { from, of, Observable, BehaviorSubject } from 'rxjs';
import * as template from 'lodash.template';
import * as templateSettings from 'lodash.templatesettings';
import { Injectable, Injector, Component, NgModule } from '@angular/core';
import { NavigationEnd, Router, RouterModule } from '@angular/router';
import { flatMap, distinct, toArray, concat, first, filter } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const _ = {
    template: template,
    templateSettings: templateSettings
};
_.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
/**
 * @param {?} template
 * @param {?} binding
 * @return {?}
 */
function stringFormat(template$$1, binding) {
    /** @type {?} */
    const compiled = _.template(template$$1);
    return compiled(binding);
}
/**
 * @param {?} value
 * @return {?}
 */
function isPromise(value) {
    return value && typeof value.then === 'function';
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function wrapIntoObservable(value) {
    if (value instanceof Observable) {
        return value;
    }
    if (isPromise(value)) {
        return from(Promise.resolve(value));
    }
    return of(/** @type {?} */ (value));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class McBreadcrumbsConfig {
}
McBreadcrumbsConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class McBreadcrumbsResolver {
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    resolve(route, state) {
        /** @type {?} */
        const data = route.routeConfig.data;
        /** @type {?} */
        const path = this.getFullPath(route);
        /** @type {?} */
        let text = typeof data["breadcrumbs"] === 'string'
            ? data["breadcrumbs"] : data["breadcrumbs"].text || data["text"] || path;
        text = stringFormat(text, route.data);
        /** @type {?} */
        const crumbs = [
            {
                text: text,
                path: path
            }
        ];
        return of(crumbs);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    getFullPath(route) {
        /** @type {?} */
        const relativePath = (segments) => segments.reduce((a, v) => (a += '/' + v.path), '');
        /** @type {?} */
        const fullPath = (routes) => routes.reduce((a, v) => (a += relativePath(v.url)), '');
        return fullPath(route.pathFromRoot);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class McBreadcrumbsService {
    /**
     * @param {?} _router
     * @param {?} _config
     * @param {?} _injector
     */
    constructor(_router, _config, _injector) {
        this._router = _router;
        this._config = _config;
        this._injector = _injector;
        this._breadcrumbs = new BehaviorSubject([]);
        this._defaultResolver = new McBreadcrumbsResolver();
        this._router.events
            .pipe(filter(x => x instanceof NavigationEnd))
            .subscribe((event) => {
            /** @type {?} */
            const route = _router.routerState.snapshot.root;
            this._resolveCrumbs(route)
                .pipe(flatMap(x => x), distinct(x => x.text), toArray(), flatMap(x => {
                if (this._config.postProcess) {
                    /** @type {?} */
                    const y = this._config.postProcess(x);
                    return wrapIntoObservable(y).pipe(first());
                }
                else {
                    return of(x);
                }
            }))
                .subscribe(x => {
                this._breadcrumbs.next(x);
            });
        });
    }
    /**
     * @return {?}
     */
    get crumbs$() {
        return this._breadcrumbs;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    _resolveCrumbs(route) {
        /** @type {?} */
        let crumbs$;
        /** @type {?} */
        const data = route.routeConfig && route.routeConfig.data;
        if (data && data["breadcrumbs"]) {
            /** @type {?} */
            let resolver;
            if (data["breadcrumbs"].prototype instanceof McBreadcrumbsResolver) {
                resolver = this._injector.get(data["breadcrumbs"]);
            }
            else {
                resolver = this._defaultResolver;
            }
            /** @type {?} */
            const result = resolver.resolve(route, this._router.routerState.snapshot);
            crumbs$ = wrapIntoObservable(result).pipe(first());
        }
        else {
            crumbs$ = of([]);
        }
        if (route.firstChild) {
            crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));
        }
        return crumbs$;
    }
}
McBreadcrumbsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
McBreadcrumbsService.ctorParameters = () => [
    { type: Router },
    { type: McBreadcrumbsConfig },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class McBreadcrumbsComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.subscriptions = new Array();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const s = this.service.crumbs$.subscribe(x => {
            this.crumbs = x;
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach(x => x.unsubscribe());
    }
}
McBreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mc-breadcrumbs',
                template: `<ol *ngIf="crumbs.length" class="breadcrumb">
  <li *ngFor="let crumb of crumbs; let last = last" [ngClass]="{ 'active': last }" class="breadcrumb-item">
    <a *ngIf="!last" [routerLink]="crumb.path">{{ crumb.text }}</a>
    <span *ngIf="last">{{ crumb.text }}</span>
  </li>
</ol>
`
            },] },
];
/** @nocollapse */
McBreadcrumbsComponent.ctorParameters = () => [
    { type: McBreadcrumbsService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class McBreadcrumbsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: McBreadcrumbsModule,
            providers: [McBreadcrumbsService, McBreadcrumbsConfig]
        };
    }
}
McBreadcrumbsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                declarations: [McBreadcrumbsComponent],
                exports: [McBreadcrumbsComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { McBreadcrumbsComponent, McBreadcrumbsService, McBreadcrumbsConfig, McBreadcrumbsResolver, McBreadcrumbsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,