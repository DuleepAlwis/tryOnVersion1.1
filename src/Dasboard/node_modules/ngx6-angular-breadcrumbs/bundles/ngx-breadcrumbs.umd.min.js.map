{"version":3,"sources":["ng://ngx-breadcrumbs/src/mc-breadcrumbs.shared.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.config.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.resolver.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.service.ts","ng://ngx-breadcrumbs/src/component/mc-breadcrumbs.component.ts","ng://ngx-breadcrumbs/src/mc-breadcrumbs.module.ts"],"names":["_","template","templateSettings","wrapIntoObservable","value","Observable","isPromise","then","from","Promise","resolve","of","interpolate","McBreadcrumbsConfig","Injectable","McBreadcrumbsResolver","prototype","route","state","data","routeConfig","path","this","getFullPath","text","crumbs","stringFormat","binding","compiled","pathFromRoot","reduce","a","v","url","McBreadcrumbsService","_router","_config","_injector","_this","BehaviorSubject","events","pipe","filter","x","NavigationEnd","subscribe","event","routerState","snapshot","root","_resolveCrumbs","flatMap","distinct","toArray","postProcess","first","_breadcrumbs","next","Object","defineProperty","crumbs$","get","_defaultResolver","firstChild","concat","Router","Injector","McBreadcrumbsComponent","service","Array","ngOnInit","ngOnDestroy","subscriptions","forEach","unsubscribe","Component","args","selector","McBreadcrumbsModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","RouterModule","declarations","exports"],"mappings":"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","sourcesContent":["import { from, of, Observable } from 'rxjs';\n\nimport * as template from 'lodash.template';\nimport * as templateSettings from 'lodash.templatesettings';\n\nconst _ = {\n  template: template,\n  templateSettings: templateSettings\n};\n\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nexport interface IBreadcrumb {\n  text: string;\n  path: string;\n}\n\ndeclare var require: any;\n\nfunction r(module) {\n  return require(`${name}`);\n}\n\nexport function stringFormat(template: string, binding: any): string {\n  const compiled = _.template(template);\n  return compiled(binding);\n}\n\nexport function isPromise(value: any): boolean {\n  return value && typeof value.then === 'function';\n}\n\nexport function wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (value instanceof Observable) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value as T);\n}\n","import { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\nexport interface IPostProcessFunc {\n  (crumbs: IBreadcrumb[]):\n    | Promise<IBreadcrumb[]>\n    | Observable<IBreadcrumb[]>\n    | IBreadcrumb[];\n}\n\n@Injectable()\nexport class McBreadcrumbsConfig {\n  postProcess: IPostProcessFunc;\n}\n","import {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n  UrlSegment\n} from '@angular/router';\nimport { IBreadcrumb, stringFormat } from '../mc-breadcrumbs.shared';\nimport { Observable, of } from 'rxjs';\n\nexport class McBreadcrumbsResolver implements Resolve<IBreadcrumb[]> {\n  public resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n    const data = route.routeConfig.data;\n    const path = this.getFullPath(route);\n\n    let text =\n      typeof data.breadcrumbs === 'string'\n        ? data.breadcrumbs\n        : data.breadcrumbs.text || data.text || path;\n    text = stringFormat(text, route.data);\n\n    const crumbs: IBreadcrumb[] = [\n      {\n        text: text,\n        path: path\n      }\n    ];\n\n    return of(crumbs);\n  }\n\n  public getFullPath(route: ActivatedRouteSnapshot): string {\n    const relativePath = (segments: UrlSegment[]) =>\n      segments.reduce((a, v) => (a += '/' + v.path), '');\n    const fullPath = (routes: ActivatedRouteSnapshot[]) =>\n      routes.reduce((a, v) => (a += relativePath(v.url)), '');\n\n    return fullPath(route.pathFromRoot);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\n\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport {\n  flatMap,\n  distinct,\n  toArray,\n  concat,\n  first,\n  filter\n} from 'rxjs/operators';\n\nimport { IBreadcrumb, wrapIntoObservable } from '../mc-breadcrumbs.shared';\nimport { McBreadcrumbsConfig } from './mc-breadcrumbs.config';\nimport { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';\n\n@Injectable()\nexport class McBreadcrumbsService {\n  private _breadcrumbs = new BehaviorSubject<IBreadcrumb[]>([]);\n  private _defaultResolver = new McBreadcrumbsResolver();\n\n  constructor(\n    private _router: Router,\n    private _config: McBreadcrumbsConfig,\n    private _injector: Injector\n  ) {\n    this._router.events\n      .pipe(filter(x => x instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        const route = _router.routerState.snapshot.root;\n\n        this._resolveCrumbs(route)\n          .pipe(\n            flatMap(x => x),\n            distinct(x => x.text),\n            toArray(),\n            flatMap(x => {\n              if (this._config.postProcess) {\n                const y = this._config.postProcess(x);\n                return wrapIntoObservable<IBreadcrumb[]>(y).pipe(first());\n              } else {\n                return of(x);\n              }\n            })\n          )\n\n          .subscribe(x => {\n            this._breadcrumbs.next(x);\n          });\n      });\n  }\n\n  get crumbs$(): Observable<IBreadcrumb[]> {\n    return this._breadcrumbs;\n  }\n\n  private _resolveCrumbs(\n    route: ActivatedRouteSnapshot\n  ): Observable<IBreadcrumb[]> {\n    let crumbs$: Observable<IBreadcrumb[]>;\n\n    const data = route.routeConfig && route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n      let resolver: McBreadcrumbsResolver;\n\n      if (data.breadcrumbs.prototype instanceof McBreadcrumbsResolver) {\n        resolver = this._injector.get(data.breadcrumbs);\n      } else {\n        resolver = this._defaultResolver;\n      }\n\n      const result = resolver.resolve(route, this._router.routerState.snapshot);\n      crumbs$ = wrapIntoObservable<IBreadcrumb[]>(result).pipe(first());\n    } else {\n      crumbs$ = of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));\n    }\n\n    return crumbs$;\n  }\n}\n","import { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mc-breadcrumbs',\n  template: `<ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n  <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n    <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n    <span *ngIf=\"last\">{{ crumb.text }}</span>\n  </li>\n</ol>\n`\n})\nexport class McBreadcrumbsComponent implements OnInit, OnDestroy {\n  constructor(public service: McBreadcrumbsService) {}\n\n  crumbs: IBreadcrumb[];\n\n  subscriptions = new Array<Subscription>();\n\n  public ngOnInit(): void {\n    const s = this.service.crumbs$.subscribe(x => {\n      this.crumbs = x;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(x => x.unsubscribe());\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { McBreadcrumbsService } from './service/mc-breadcrumbs.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { McBreadcrumbsComponent } from './component/mc-breadcrumbs.component';\nimport { McBreadcrumbsConfig } from './service/mc-breadcrumbs.config';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [McBreadcrumbsComponent],\n  exports: [McBreadcrumbsComponent]\n})\nexport class McBreadcrumbsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: McBreadcrumbsModule,\n      providers: [McBreadcrumbsService, McBreadcrumbsConfig]\n    };\n  }\n}\n"]}