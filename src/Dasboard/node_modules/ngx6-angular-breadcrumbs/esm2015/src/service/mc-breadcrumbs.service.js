/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { BehaviorSubject, of } from 'rxjs';
import { flatMap, distinct, toArray, concat, first, filter } from 'rxjs/operators';
import { wrapIntoObservable } from '../mc-breadcrumbs.shared';
import { McBreadcrumbsConfig } from './mc-breadcrumbs.config';
import { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';
export class McBreadcrumbsService {
    /**
     * @param {?} _router
     * @param {?} _config
     * @param {?} _injector
     */
    constructor(_router, _config, _injector) {
        this._router = _router;
        this._config = _config;
        this._injector = _injector;
        this._breadcrumbs = new BehaviorSubject([]);
        this._defaultResolver = new McBreadcrumbsResolver();
        this._router.events
            .pipe(filter(x => x instanceof NavigationEnd))
            .subscribe((event) => {
            /** @type {?} */
            const route = _router.routerState.snapshot.root;
            this._resolveCrumbs(route)
                .pipe(flatMap(x => x), distinct(x => x.text), toArray(), flatMap(x => {
                if (this._config.postProcess) {
                    /** @type {?} */
                    const y = this._config.postProcess(x);
                    return wrapIntoObservable(y).pipe(first());
                }
                else {
                    return of(x);
                }
            }))
                .subscribe(x => {
                this._breadcrumbs.next(x);
            });
        });
    }
    /**
     * @return {?}
     */
    get crumbs$() {
        return this._breadcrumbs;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    _resolveCrumbs(route) {
        /** @type {?} */
        let crumbs$;
        /** @type {?} */
        const data = route.routeConfig && route.routeConfig.data;
        if (data && data["breadcrumbs"]) {
            /** @type {?} */
            let resolver;
            if (data["breadcrumbs"].prototype instanceof McBreadcrumbsResolver) {
                resolver = this._injector.get(data["breadcrumbs"]);
            }
            else {
                resolver = this._defaultResolver;
            }
            /** @type {?} */
            const result = resolver.resolve(route, this._router.routerState.snapshot);
            crumbs$ = wrapIntoObservable(result).pipe(first());
        }
        else {
            crumbs$ = of([]);
        }
        if (route.firstChild) {
            crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));
        }
        return crumbs$;
    }
}
McBreadcrumbsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
McBreadcrumbsService.ctorParameters = () => [
    { type: Router },
    { type: McBreadcrumbsConfig },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    McBreadcrumbsService.prototype._breadcrumbs;
    /** @type {?} */
    McBreadcrumbsService.prototype._defaultResolver;
    /** @type {?} */
    McBreadcrumbsService.prototype._router;
    /** @type {?} */
    McBreadcrumbsService.prototype._config;
    /** @type {?} */
    McBreadcrumbsService.prototype._injector;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWMtYnJlYWRjcnVtYnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1icmVhZGNydW1icy8iLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlL21jLWJyZWFkY3J1bWJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBMEIsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhGLE9BQU8sRUFBYyxlQUFlLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFDTCxPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDUCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFBZSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR2xFLE1BQU07Ozs7OztJQUlKLFlBQ1UsU0FDQSxTQUNBO1FBRkEsWUFBTyxHQUFQLE9BQU87UUFDUCxZQUFPLEdBQVAsT0FBTztRQUNQLGNBQVMsR0FBVCxTQUFTOzRCQU5JLElBQUksZUFBZSxDQUFnQixFQUFFLENBQUM7Z0NBQ2xDLElBQUkscUJBQXFCLEVBQUU7UUFPcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksYUFBYSxDQUFDLENBQUM7YUFDN0MsU0FBUyxDQUFDLENBQUMsS0FBb0IsRUFBRSxFQUFFOztZQUNsQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFFaEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7aUJBQ3ZCLElBQUksQ0FDSCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDZixRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3JCLE9BQU8sRUFBRSxFQUNULE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDVixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7O29CQUM3QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxDQUFDLGtCQUFrQixDQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztpQkFDM0Q7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDZDthQUNGLENBQUMsQ0FDSDtpQkFFQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0IsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztLQUMxQjs7Ozs7SUFFTyxjQUFjLENBQ3BCLEtBQTZCOztRQUU3QixJQUFJLE9BQU8sQ0FBNEI7O1FBRXZDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFekQsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksZUFBWSxDQUFDLENBQUMsQ0FBQzs7WUFDN0IsSUFBSSxRQUFRLENBQXdCO1lBRXBDLEVBQUUsQ0FBQyxDQUFDLElBQUksZ0JBQWEsU0FBUyxZQUFZLHFCQUFxQixDQUFDLENBQUMsQ0FBQztnQkFDaEUsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksZ0JBQWEsQ0FBQzthQUNqRDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7YUFDbEM7O1lBRUQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUUsT0FBTyxHQUFHLGtCQUFrQixDQUFnQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNuRTtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNsQjtRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkU7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDOzs7O1lBbEVsQixVQUFVOzs7O1lBaEJxQyxNQUFNO1lBYTdDLG1CQUFtQjtZQWZQLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBOYXZpZ2F0aW9uRW5kLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBmbGF0TWFwLFxuICBkaXN0aW5jdCxcbiAgdG9BcnJheSxcbiAgY29uY2F0LFxuICBmaXJzdCxcbiAgZmlsdGVyXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgSUJyZWFkY3J1bWIsIHdyYXBJbnRvT2JzZXJ2YWJsZSB9IGZyb20gJy4uL21jLWJyZWFkY3J1bWJzLnNoYXJlZCc7XG5pbXBvcnQgeyBNY0JyZWFkY3J1bWJzQ29uZmlnIH0gZnJvbSAnLi9tYy1icmVhZGNydW1icy5jb25maWcnO1xuaW1wb3J0IHsgTWNCcmVhZGNydW1ic1Jlc29sdmVyIH0gZnJvbSAnLi9tYy1icmVhZGNydW1icy5yZXNvbHZlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNY0JyZWFkY3J1bWJzU2VydmljZSB7XG4gIHByaXZhdGUgX2JyZWFkY3J1bWJzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxJQnJlYWRjcnVtYltdPihbXSk7XG4gIHByaXZhdGUgX2RlZmF1bHRSZXNvbHZlciA9IG5ldyBNY0JyZWFkY3J1bWJzUmVzb2x2ZXIoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIF9jb25maWc6IE1jQnJlYWRjcnVtYnNDb25maWcsXG4gICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuX3JvdXRlci5ldmVudHNcbiAgICAgIC5waXBlKGZpbHRlcih4ID0+IHggaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSlcbiAgICAgIC5zdWJzY3JpYmUoKGV2ZW50OiBOYXZpZ2F0aW9uRW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gX3JvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdC5yb290O1xuXG4gICAgICAgIHRoaXMuX3Jlc29sdmVDcnVtYnMocm91dGUpXG4gICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBmbGF0TWFwKHggPT4geCksXG4gICAgICAgICAgICBkaXN0aW5jdCh4ID0+IHgudGV4dCksXG4gICAgICAgICAgICB0b0FycmF5KCksXG4gICAgICAgICAgICBmbGF0TWFwKHggPT4ge1xuICAgICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLnBvc3RQcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMuX2NvbmZpZy5wb3N0UHJvY2Vzcyh4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcEludG9PYnNlcnZhYmxlPElCcmVhZGNydW1iW10+KHkpLnBpcGUoZmlyc3QoKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcblxuICAgICAgICAgIC5zdWJzY3JpYmUoeCA9PiB7XG4gICAgICAgICAgICB0aGlzLl9icmVhZGNydW1icy5uZXh0KHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBnZXQgY3J1bWJzJCgpOiBPYnNlcnZhYmxlPElCcmVhZGNydW1iW10+IHtcbiAgICByZXR1cm4gdGhpcy5fYnJlYWRjcnVtYnM7XG4gIH1cblxuICBwcml2YXRlIF9yZXNvbHZlQ3J1bWJzKFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8SUJyZWFkY3J1bWJbXT4ge1xuICAgIGxldCBjcnVtYnMkOiBPYnNlcnZhYmxlPElCcmVhZGNydW1iW10+O1xuXG4gICAgY29uc3QgZGF0YSA9IHJvdXRlLnJvdXRlQ29uZmlnICYmIHJvdXRlLnJvdXRlQ29uZmlnLmRhdGE7XG5cbiAgICBpZiAoZGF0YSAmJiBkYXRhLmJyZWFkY3J1bWJzKSB7XG4gICAgICBsZXQgcmVzb2x2ZXI6IE1jQnJlYWRjcnVtYnNSZXNvbHZlcjtcblxuICAgICAgaWYgKGRhdGEuYnJlYWRjcnVtYnMucHJvdG90eXBlIGluc3RhbmNlb2YgTWNCcmVhZGNydW1ic1Jlc29sdmVyKSB7XG4gICAgICAgIHJlc29sdmVyID0gdGhpcy5faW5qZWN0b3IuZ2V0KGRhdGEuYnJlYWRjcnVtYnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZXIgPSB0aGlzLl9kZWZhdWx0UmVzb2x2ZXI7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc29sdmVyLnJlc29sdmUocm91dGUsIHRoaXMuX3JvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdCk7XG4gICAgICBjcnVtYnMkID0gd3JhcEludG9PYnNlcnZhYmxlPElCcmVhZGNydW1iW10+KHJlc3VsdCkucGlwZShmaXJzdCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3J1bWJzJCA9IG9mKFtdKTtcbiAgICB9XG5cbiAgICBpZiAocm91dGUuZmlyc3RDaGlsZCkge1xuICAgICAgY3J1bWJzJCA9IGNydW1icyQucGlwZShjb25jYXQodGhpcy5fcmVzb2x2ZUNydW1icyhyb3V0ZS5maXJzdENoaWxkKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBjcnVtYnMkO1xuICB9XG59XG4iXX0=