/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { BehaviorSubject, of } from 'rxjs';
import { flatMap, distinct, toArray, concat, first, filter } from 'rxjs/operators';
import { wrapIntoObservable } from '../mc-breadcrumbs.shared';
import { McBreadcrumbsConfig } from './mc-breadcrumbs.config';
import { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';
var McBreadcrumbsService = /** @class */ (function () {
    function McBreadcrumbsService(_router, _config, _injector) {
        var _this = this;
        this._router = _router;
        this._config = _config;
        this._injector = _injector;
        this._breadcrumbs = new BehaviorSubject([]);
        this._defaultResolver = new McBreadcrumbsResolver();
        this._router.events
            .pipe(filter(function (x) { return x instanceof NavigationEnd; }))
            .subscribe(function (event) {
            /** @type {?} */
            var route = _router.routerState.snapshot.root;
            _this._resolveCrumbs(route)
                .pipe(flatMap(function (x) { return x; }), distinct(function (x) { return x.text; }), toArray(), flatMap(function (x) {
                if (_this._config.postProcess) {
                    /** @type {?} */
                    var y = _this._config.postProcess(x);
                    return wrapIntoObservable(y).pipe(first());
                }
                else {
                    return of(x);
                }
            }))
                .subscribe(function (x) {
                _this._breadcrumbs.next(x);
            });
        });
    }
    Object.defineProperty(McBreadcrumbsService.prototype, "crumbs$", {
        get: /**
         * @return {?}
         */
        function () {
            return this._breadcrumbs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} route
     * @return {?}
     */
    McBreadcrumbsService.prototype._resolveCrumbs = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var crumbs$;
        /** @type {?} */
        var data = route.routeConfig && route.routeConfig.data;
        if (data && data["breadcrumbs"]) {
            /** @type {?} */
            var resolver = void 0;
            if (data["breadcrumbs"].prototype instanceof McBreadcrumbsResolver) {
                resolver = this._injector.get(data["breadcrumbs"]);
            }
            else {
                resolver = this._defaultResolver;
            }
            /** @type {?} */
            var result = resolver.resolve(route, this._router.routerState.snapshot);
            crumbs$ = wrapIntoObservable(result).pipe(first());
        }
        else {
            crumbs$ = of([]);
        }
        if (route.firstChild) {
            crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));
        }
        return crumbs$;
    };
    McBreadcrumbsService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    McBreadcrumbsService.ctorParameters = function () { return [
        { type: Router },
        { type: McBreadcrumbsConfig },
        { type: Injector }
    ]; };
    return McBreadcrumbsService;
}());
export { McBreadcrumbsService };
if (false) {
    /** @type {?} */
    McBreadcrumbsService.prototype._breadcrumbs;
    /** @type {?} */
    McBreadcrumbsService.prototype._defaultResolver;
    /** @type {?} */
    McBreadcrumbsService.prototype._router;
    /** @type {?} */
    McBreadcrumbsService.prototype._config;
    /** @type {?} */
    McBreadcrumbsService.prototype._injector;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWMtYnJlYWRjcnVtYnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1icmVhZGNydW1icy8iLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlL21jLWJyZWFkY3J1bWJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBMEIsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhGLE9BQU8sRUFBYyxlQUFlLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFDTCxPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDUCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFBZSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOztJQU9oRSw4QkFDVSxTQUNBLFNBQ0E7UUFIVixpQkE2QkM7UUE1QlMsWUFBTyxHQUFQLE9BQU87UUFDUCxZQUFPLEdBQVAsT0FBTztRQUNQLGNBQVMsR0FBVCxTQUFTOzRCQU5JLElBQUksZUFBZSxDQUFnQixFQUFFLENBQUM7Z0NBQ2xDLElBQUkscUJBQXFCLEVBQUU7UUFPcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLFlBQVksYUFBYSxFQUExQixDQUEwQixDQUFDLENBQUM7YUFDN0MsU0FBUyxDQUFDLFVBQUMsS0FBb0I7O1lBQzlCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUVoRCxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztpQkFDdkIsSUFBSSxDQUNILE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsRUFDZixRQUFRLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFOLENBQU0sQ0FBQyxFQUNyQixPQUFPLEVBQUUsRUFDVCxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUNQLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7b0JBQzdCLElBQU0sQ0FBQyxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLENBQUMsa0JBQWtCLENBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRDtnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNkO2FBQ0YsQ0FBQyxDQUNIO2lCQUVBLFNBQVMsQ0FBQyxVQUFBLENBQUM7Z0JBQ1YsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0IsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ047SUFFRCxzQkFBSSx5Q0FBTzs7OztRQUFYO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUI7OztPQUFBOzs7OztJQUVPLDZDQUFjOzs7O2NBQ3BCLEtBQTZCOztRQUU3QixJQUFJLE9BQU8sQ0FBNEI7O1FBRXZDLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFekQsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksZUFBWSxDQUFDLENBQUMsQ0FBQzs7WUFDN0IsSUFBSSxRQUFRLFVBQXdCO1lBRXBDLEVBQUUsQ0FBQyxDQUFDLElBQUksZ0JBQWEsU0FBUyxZQUFZLHFCQUFxQixDQUFDLENBQUMsQ0FBQztnQkFDaEUsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksZ0JBQWEsQ0FBQzthQUNqRDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7YUFDbEM7O1lBRUQsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUUsT0FBTyxHQUFHLGtCQUFrQixDQUFnQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNuRTtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNsQjtRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkU7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Z0JBbEVsQixVQUFVOzs7O2dCQWhCcUMsTUFBTTtnQkFhN0MsbUJBQW1CO2dCQWZQLFFBQVE7OytCQUE3Qjs7U0FtQmEsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgZmxhdE1hcCxcbiAgZGlzdGluY3QsXG4gIHRvQXJyYXksXG4gIGNvbmNhdCxcbiAgZmlyc3QsXG4gIGZpbHRlclxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IElCcmVhZGNydW1iLCB3cmFwSW50b09ic2VydmFibGUgfSBmcm9tICcuLi9tYy1icmVhZGNydW1icy5zaGFyZWQnO1xuaW1wb3J0IHsgTWNCcmVhZGNydW1ic0NvbmZpZyB9IGZyb20gJy4vbWMtYnJlYWRjcnVtYnMuY29uZmlnJztcbmltcG9ydCB7IE1jQnJlYWRjcnVtYnNSZXNvbHZlciB9IGZyb20gJy4vbWMtYnJlYWRjcnVtYnMucmVzb2x2ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWNCcmVhZGNydW1ic1NlcnZpY2Uge1xuICBwcml2YXRlIF9icmVhZGNydW1icyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8SUJyZWFkY3J1bWJbXT4oW10pO1xuICBwcml2YXRlIF9kZWZhdWx0UmVzb2x2ZXIgPSBuZXcgTWNCcmVhZGNydW1ic1Jlc29sdmVyKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBfY29uZmlnOiBNY0JyZWFkY3J1bWJzQ29uZmlnLFxuICAgIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLl9yb3V0ZXIuZXZlbnRzXG4gICAgICAucGlwZShmaWx0ZXIoeCA9PiB4IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudDogTmF2aWdhdGlvbkVuZCkgPT4ge1xuICAgICAgICBjb25zdCByb3V0ZSA9IF9yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3Qucm9vdDtcblxuICAgICAgICB0aGlzLl9yZXNvbHZlQ3J1bWJzKHJvdXRlKVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgZmxhdE1hcCh4ID0+IHgpLFxuICAgICAgICAgICAgZGlzdGluY3QoeCA9PiB4LnRleHQpLFxuICAgICAgICAgICAgdG9BcnJheSgpLFxuICAgICAgICAgICAgZmxhdE1hcCh4ID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wb3N0UHJvY2Vzcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLl9jb25maWcucG9zdFByb2Nlc3MoeCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBJbnRvT2JzZXJ2YWJsZTxJQnJlYWRjcnVtYltdPih5KS5waXBlKGZpcnN0KCkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvZih4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG5cbiAgICAgICAgICAuc3Vic2NyaWJlKHggPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMubmV4dCh4KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0IGNydW1icyQoKTogT2JzZXJ2YWJsZTxJQnJlYWRjcnVtYltdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWFkY3J1bWJzO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVzb2x2ZUNydW1icyhcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPElCcmVhZGNydW1iW10+IHtcbiAgICBsZXQgY3J1bWJzJDogT2JzZXJ2YWJsZTxJQnJlYWRjcnVtYltdPjtcblxuICAgIGNvbnN0IGRhdGEgPSByb3V0ZS5yb3V0ZUNvbmZpZyAmJiByb3V0ZS5yb3V0ZUNvbmZpZy5kYXRhO1xuXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5icmVhZGNydW1icykge1xuICAgICAgbGV0IHJlc29sdmVyOiBNY0JyZWFkY3J1bWJzUmVzb2x2ZXI7XG5cbiAgICAgIGlmIChkYXRhLmJyZWFkY3J1bWJzLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1jQnJlYWRjcnVtYnNSZXNvbHZlcikge1xuICAgICAgICByZXNvbHZlciA9IHRoaXMuX2luamVjdG9yLmdldChkYXRhLmJyZWFkY3J1bWJzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVyID0gdGhpcy5fZGVmYXVsdFJlc29sdmVyO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSByZXNvbHZlci5yZXNvbHZlKHJvdXRlLCB0aGlzLl9yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QpO1xuICAgICAgY3J1bWJzJCA9IHdyYXBJbnRvT2JzZXJ2YWJsZTxJQnJlYWRjcnVtYltdPihyZXN1bHQpLnBpcGUoZmlyc3QoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNydW1icyQgPSBvZihbXSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGNydW1icyQgPSBjcnVtYnMkLnBpcGUoY29uY2F0KHRoaXMuX3Jlc29sdmVDcnVtYnMocm91dGUuZmlyc3RDaGlsZCkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3J1bWJzJDtcbiAgfVxufVxuIl19