{"version":3,"file":"ngx-breadcrumbs.umd.js.map","sources":["ng://ngx-breadcrumbs/src/mc-breadcrumbs.shared.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.config.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.resolver.ts","ng://ngx-breadcrumbs/src/service/mc-breadcrumbs.service.ts","ng://ngx-breadcrumbs/src/component/mc-breadcrumbs.component.ts","ng://ngx-breadcrumbs/src/mc-breadcrumbs.module.ts"],"sourcesContent":["import { from, of, Observable } from 'rxjs';\n\nimport * as template from 'lodash.template';\nimport * as templateSettings from 'lodash.templatesettings';\n\nconst _ = {\n  template: template,\n  templateSettings: templateSettings\n};\n\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nexport interface IBreadcrumb {\n  text: string;\n  path: string;\n}\n\ndeclare var require: any;\n\nfunction r(module) {\n  return require(`${name}`);\n}\n\nexport function stringFormat(template: string, binding: any): string {\n  const compiled = _.template(template);\n  return compiled(binding);\n}\n\nexport function isPromise(value: any): boolean {\n  return value && typeof value.then === 'function';\n}\n\nexport function wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (value instanceof Observable) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value as T);\n}\n","import { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\nexport interface IPostProcessFunc {\n  (crumbs: IBreadcrumb[]):\n    | Promise<IBreadcrumb[]>\n    | Observable<IBreadcrumb[]>\n    | IBreadcrumb[];\n}\n\n@Injectable()\nexport class McBreadcrumbsConfig {\n  postProcess: IPostProcessFunc;\n}\n","import {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n  UrlSegment\n} from '@angular/router';\nimport { IBreadcrumb, stringFormat } from '../mc-breadcrumbs.shared';\nimport { Observable, of } from 'rxjs';\n\nexport class McBreadcrumbsResolver implements Resolve<IBreadcrumb[]> {\n  public resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n    const data = route.routeConfig.data;\n    const path = this.getFullPath(route);\n\n    let text =\n      typeof data.breadcrumbs === 'string'\n        ? data.breadcrumbs\n        : data.breadcrumbs.text || data.text || path;\n    text = stringFormat(text, route.data);\n\n    const crumbs: IBreadcrumb[] = [\n      {\n        text: text,\n        path: path\n      }\n    ];\n\n    return of(crumbs);\n  }\n\n  public getFullPath(route: ActivatedRouteSnapshot): string {\n    const relativePath = (segments: UrlSegment[]) =>\n      segments.reduce((a, v) => (a += '/' + v.path), '');\n    const fullPath = (routes: ActivatedRouteSnapshot[]) =>\n      routes.reduce((a, v) => (a += relativePath(v.url)), '');\n\n    return fullPath(route.pathFromRoot);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\n\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport {\n  flatMap,\n  distinct,\n  toArray,\n  concat,\n  first,\n  filter\n} from 'rxjs/operators';\n\nimport { IBreadcrumb, wrapIntoObservable } from '../mc-breadcrumbs.shared';\nimport { McBreadcrumbsConfig } from './mc-breadcrumbs.config';\nimport { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';\n\n@Injectable()\nexport class McBreadcrumbsService {\n  private _breadcrumbs = new BehaviorSubject<IBreadcrumb[]>([]);\n  private _defaultResolver = new McBreadcrumbsResolver();\n\n  constructor(\n    private _router: Router,\n    private _config: McBreadcrumbsConfig,\n    private _injector: Injector\n  ) {\n    this._router.events\n      .pipe(filter(x => x instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        const route = _router.routerState.snapshot.root;\n\n        this._resolveCrumbs(route)\n          .pipe(\n            flatMap(x => x),\n            distinct(x => x.text),\n            toArray(),\n            flatMap(x => {\n              if (this._config.postProcess) {\n                const y = this._config.postProcess(x);\n                return wrapIntoObservable<IBreadcrumb[]>(y).pipe(first());\n              } else {\n                return of(x);\n              }\n            })\n          )\n\n          .subscribe(x => {\n            this._breadcrumbs.next(x);\n          });\n      });\n  }\n\n  get crumbs$(): Observable<IBreadcrumb[]> {\n    return this._breadcrumbs;\n  }\n\n  private _resolveCrumbs(\n    route: ActivatedRouteSnapshot\n  ): Observable<IBreadcrumb[]> {\n    let crumbs$: Observable<IBreadcrumb[]>;\n\n    const data = route.routeConfig && route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n      let resolver: McBreadcrumbsResolver;\n\n      if (data.breadcrumbs.prototype instanceof McBreadcrumbsResolver) {\n        resolver = this._injector.get(data.breadcrumbs);\n      } else {\n        resolver = this._defaultResolver;\n      }\n\n      const result = resolver.resolve(route, this._router.routerState.snapshot);\n      crumbs$ = wrapIntoObservable<IBreadcrumb[]>(result).pipe(first());\n    } else {\n      crumbs$ = of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = crumbs$.pipe(concat(this._resolveCrumbs(route.firstChild)));\n    }\n\n    return crumbs$;\n  }\n}\n","import { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mc-breadcrumbs',\n  template: `<ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n  <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n    <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n    <span *ngIf=\"last\">{{ crumb.text }}</span>\n  </li>\n</ol>\n`\n})\nexport class McBreadcrumbsComponent implements OnInit, OnDestroy {\n  constructor(public service: McBreadcrumbsService) {}\n\n  crumbs: IBreadcrumb[];\n\n  subscriptions = new Array<Subscription>();\n\n  public ngOnInit(): void {\n    const s = this.service.crumbs$.subscribe(x => {\n      this.crumbs = x;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(x => x.unsubscribe());\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { McBreadcrumbsService } from './service/mc-breadcrumbs.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { McBreadcrumbsComponent } from './component/mc-breadcrumbs.component';\nimport { McBreadcrumbsConfig } from './service/mc-breadcrumbs.config';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [McBreadcrumbsComponent],\n  exports: [McBreadcrumbsComponent]\n})\nexport class McBreadcrumbsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: McBreadcrumbsModule,\n      providers: [McBreadcrumbsService, McBreadcrumbsConfig]\n    };\n  }\n}\n"],"names":["template","Observable","from","of","Injectable","BehaviorSubject","filter","NavigationEnd","flatMap","distinct","toArray","first","concat","Router","Injector","Component","NgModule","CommonModule","RouterModule"],"mappings":"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"}
