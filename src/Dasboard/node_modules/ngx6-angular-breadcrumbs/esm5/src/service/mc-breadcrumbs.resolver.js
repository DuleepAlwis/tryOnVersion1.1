/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { stringFormat } from '../mc-breadcrumbs.shared';
import { of } from 'rxjs';
var McBreadcrumbsResolver = /** @class */ (function () {
    function McBreadcrumbsResolver() {
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    McBreadcrumbsResolver.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var data = route.routeConfig.data;
        /** @type {?} */
        var path = this.getFullPath(route);
        /** @type {?} */
        var text = typeof data["breadcrumbs"] === 'string'
            ? data["breadcrumbs"] : data["breadcrumbs"].text || data["text"] || path;
        text = stringFormat(text, route.data);
        /** @type {?} */
        var crumbs = [
            {
                text: text,
                path: path
            }
        ];
        return of(crumbs);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    McBreadcrumbsResolver.prototype.getFullPath = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var relativePath = function (segments) {
            return segments.reduce(function (a, v) { return (a += '/' + v.path); }, '');
        };
        /** @type {?} */
        var fullPath = function (routes) {
            return routes.reduce(function (a, v) { return (a += relativePath(v.url)); }, '');
        };
        return fullPath(route.pathFromRoot);
    };
    return McBreadcrumbsResolver;
}());
export { McBreadcrumbsResolver };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWMtYnJlYWRjcnVtYnMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYnJlYWRjcnVtYnMvIiwic291cmNlcyI6WyJzcmMvc2VydmljZS9tYy1icmVhZGNydW1icy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBTUEsT0FBTyxFQUFlLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsSUFBQTs7Ozs7Ozs7SUFDUyx1Q0FBTzs7Ozs7Y0FDWixLQUE2QixFQUM3QixLQUEwQjs7UUFFMUIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7O1FBQ3BDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7O1FBRXJDLElBQUksSUFBSSxHQUNOLE9BQU8sSUFBSSxlQUFZLEtBQUssUUFBUTtZQUNsQyxDQUFDLENBQUMsSUFBSSxnQkFDTixDQUFDLENBQUMsSUFBSSxnQkFBYSxJQUFJLElBQUksSUFBSSxRQUFLLElBQUksSUFBSSxDQUFDO1FBQ2pELElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFFdEMsSUFBTSxNQUFNLEdBQWtCO1lBQzVCO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLElBQUksRUFBRSxJQUFJO2FBQ1g7U0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7O0lBR2IsMkNBQVc7Ozs7Y0FBQyxLQUE2Qjs7UUFDOUMsSUFBTSxZQUFZLEdBQUcsVUFBQyxRQUFzQjtZQUMxQyxPQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBbkIsQ0FBbUIsRUFBRSxFQUFFLENBQUM7UUFBbEQsQ0FBa0QsQ0FBQzs7UUFDckQsSUFBTSxRQUFRLEdBQUcsVUFBQyxNQUFnQztZQUNoRCxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUExQixDQUEwQixFQUFFLEVBQUUsQ0FBQztRQUF2RCxDQUF1RCxDQUFDO1FBRTFELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDOztnQ0F2Q3hDO0lBeUNDLENBQUE7QUFoQ0QsaUNBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUmVzb2x2ZSxcbiAgUm91dGVyU3RhdGVTbmFwc2hvdCxcbiAgVXJsU2VnbWVudFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSUJyZWFkY3J1bWIsIHN0cmluZ0Zvcm1hdCB9IGZyb20gJy4uL21jLWJyZWFkY3J1bWJzLnNoYXJlZCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgTWNCcmVhZGNydW1ic1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxJQnJlYWRjcnVtYltdPiB7XG4gIHB1YmxpYyByZXNvbHZlKFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8SUJyZWFkY3J1bWJbXT4gfCBQcm9taXNlPElCcmVhZGNydW1iW10+IHwgSUJyZWFkY3J1bWJbXSB7XG4gICAgY29uc3QgZGF0YSA9IHJvdXRlLnJvdXRlQ29uZmlnLmRhdGE7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0RnVsbFBhdGgocm91dGUpO1xuXG4gICAgbGV0IHRleHQgPVxuICAgICAgdHlwZW9mIGRhdGEuYnJlYWRjcnVtYnMgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZGF0YS5icmVhZGNydW1ic1xuICAgICAgICA6IGRhdGEuYnJlYWRjcnVtYnMudGV4dCB8fCBkYXRhLnRleHQgfHwgcGF0aDtcbiAgICB0ZXh0ID0gc3RyaW5nRm9ybWF0KHRleHQsIHJvdXRlLmRhdGEpO1xuXG4gICAgY29uc3QgY3J1bWJzOiBJQnJlYWRjcnVtYltdID0gW1xuICAgICAge1xuICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICBwYXRoOiBwYXRoXG4gICAgICB9XG4gICAgXTtcblxuICAgIHJldHVybiBvZihjcnVtYnMpO1xuICB9XG5cbiAgcHVibGljIGdldEZ1bGxQYXRoKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogc3RyaW5nIHtcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSAoc2VnbWVudHM6IFVybFNlZ21lbnRbXSkgPT5cbiAgICAgIHNlZ21lbnRzLnJlZHVjZSgoYSwgdikgPT4gKGEgKz0gJy8nICsgdi5wYXRoKSwgJycpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gKHJvdXRlczogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFtdKSA9PlxuICAgICAgcm91dGVzLnJlZHVjZSgoYSwgdikgPT4gKGEgKz0gcmVsYXRpdmVQYXRoKHYudXJsKSksICcnKTtcblxuICAgIHJldHVybiBmdWxsUGF0aChyb3V0ZS5wYXRoRnJvbVJvb3QpO1xuICB9XG59XG4iXX0=